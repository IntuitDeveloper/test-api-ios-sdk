// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IntuitPlugin
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AFMobileShellCore
import AppShellWidgetInterface
import Foundation
@_exported import IntuitPlugin
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol AppContext {
  var appAuthToken: Swift.String { get }
  var appName: Swift.String? { get }
  var offeringId: Swift.String? { get }
}
public protocol AppFabricWrapper {
  var sandbox: IntuitPlugin.IntuitSDKSandbox { get set }
  init(config: IntuitPlugin.Config)
}
public class Config {
  public var appName: Swift.String
  public var appAuthToken: Swift.String
  public var offeringId: Swift.String
  public var sdkAssetId: Swift.String
  public var sdkAssetAlias: Swift.String
  public init(appName: Swift.String, appAuthToken: Swift.String, offeringId: Swift.String, assetId: Swift.String, assetAlias: Swift.String)
  @objc deinit
}
public protocol Event {
  associatedtype Data
  var source: IntuitPlugin.EventSource { get }
  var data: Self.Data { get }
}
public struct EventSource {
  public init(name: Swift.String)
}
public protocol ErrorEvent : IntuitPlugin.Event where Self.Data == any Swift.Error {
  var data: any Swift.Error { get }
  var error: any Swift.Error { get }
}
public protocol URLEvent : IntuitPlugin.Event where Self.Data == Foundation.URL {
  var data: Foundation.URL { get }
  var url: Foundation.URL { get }
}
public struct Response {
  public var message: Swift.String
  public init(message: Swift.String)
}
public typealias CompletionHandler = (any IntuitPlugin.Event, IntuitPlugin.Response) -> Swift.Void
public protocol IntuitSDK {
  static func load<T>(config: any IntuitPlugin.SDKConfiguration) throws -> T where T : IntuitPlugin.IntuitSDK
  func unload(_ completion: (any IntuitPlugin.Event, IntuitPlugin.Response) -> Swift.Void)
  func handleAppEvent(_ event: any IntuitPlugin.Event, completion: (any IntuitPlugin.Event, IntuitPlugin.Response) -> Swift.Void)
}
public class IntuitSDKSandbox : AFMobileShellCore.MobileSandbox {
  public init(contextDelegate: any AppShellWidgetInterface.AFMobileContextDelegate, authenticationDelegate: any AppShellWidgetInterface.AFMobileAuthenticationDelegate)
  @objc deinit
}
public protocol SDKConfiguration {
  var appContext: any IntuitPlugin.AppContext { get }
  var eventHandler: any IntuitPlugin.SDKEventHandler { get }
}
public protocol SDKEventHandler {
  func handleSDKEvent(_ event: any IntuitPlugin.Event, completion: (any IntuitPlugin.Event, IntuitPlugin.Response) -> Swift.Void)
}
