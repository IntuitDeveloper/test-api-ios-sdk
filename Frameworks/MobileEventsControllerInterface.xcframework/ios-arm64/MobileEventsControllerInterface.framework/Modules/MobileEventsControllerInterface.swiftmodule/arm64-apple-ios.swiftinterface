// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MobileEventsControllerInterface
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import MobileEventsControllerInterface
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ReceiptProtocol : Swift.Codable {
  case SSE
  case WSS
  case PUSH
  public static func == (a: MobileEventsControllerInterface.ReceiptProtocol, b: MobileEventsControllerInterface.ReceiptProtocol) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct EventsMetadata : Swift.Codable {
  public var txId: Swift.String?
  public var interactionId: Swift.String?
  public var intuitRealmId: Swift.String?
  public var intuitUserId: Swift.String?
  public var appId: Swift.String?
  public var iceEventId: Swift.String?
  public var timestamp: Swift.String?
  public var receiptProtocol: MobileEventsControllerInterface.ReceiptProtocol?
  public init(txId: Swift.String?, interactionId: Swift.String?, intuitRealmId: Swift.String? = nil, intuitUserId: Swift.String? = nil, appId: Swift.String? = nil, iceEventId: Swift.String? = nil, timestamp: Swift.String? = nil, receiptProtocol: MobileEventsControllerInterface.ReceiptProtocol? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol IAuthenticationDelegate {
  func getAuthHeaders() -> [Swift.String : Swift.String]
  func getAuthHeaders(completionHandler: @escaping (Swift.Result<[Swift.String : Swift.String], any Swift.Error>) -> Swift.Void)
}
public protocol ILogger {
  func info(message: Swift.String, obj: [Swift.String : Swift.AnyObject]?)
  func warn(message: Swift.String, obj: [Swift.String : Swift.AnyObject]?)
  func debug(message: Swift.String, obj: [Swift.String : Swift.AnyObject]?)
  func error(message: Swift.String, obj: [Swift.String : Swift.AnyObject]?)
  func trace(message: Swift.String, obj: [Swift.String : Swift.AnyObject]?)
}
public struct Subscription {
  public var subscriptionId: Swift.String
  public var topic: MobileEventsControllerInterface.Topic
  public var onData: (Any?, MobileEventsControllerInterface.EventsMetadata?) -> Swift.Void
  public var onError: ((any Swift.Error) -> Swift.Void)?
  public var transInfo: MobileEventsControllerInterface.EventsMetadata?
  public init(subscriptionId: Swift.String, topic: MobileEventsControllerInterface.Topic, onData: @escaping (Any?, MobileEventsControllerInterface.EventsMetadata?) -> Swift.Void, onError: ((any Swift.Error) -> Swift.Void)?, transInfo: MobileEventsControllerInterface.EventsMetadata? = nil)
}
public struct Topic {
  public var name: Swift.String
  public var resourceOwner: Swift.String
  public init(name: Swift.String, resourceOwner: Swift.String)
}
extension MobileEventsControllerInterface.ReceiptProtocol : Swift.Equatable {}
extension MobileEventsControllerInterface.ReceiptProtocol : Swift.Hashable {}
