// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AFMobileContextInterface
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AFMobileContextInterface
import AFMobileLoggingInterface
import Foundation
import Swift
import _Concurrency
import _StringProcessing
public protocol AFAsset {
  var assetId: Swift.String { get }
  var assetAlias: Swift.String { get }
}
public protocol AFAssetSource {
  func getAsset() -> any AFMobileContextInterface.AFAsset
}
public enum AuthEnvironmentType : Swift.Int {
  case dev
  case qa
  case e2E
  case prod
  public var configurationKey: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension AFMobileContextInterface.AuthEnvironmentType : Swift.CaseIterable {
  public typealias AllCases = [AFMobileContextInterface.AuthEnvironmentType]
  public static var allCases: [AFMobileContextInterface.AuthEnvironmentType] {
    get
  }
}
public protocol ContextDelegate : Foundation.NSCopying {
  var assetSource: any AFMobileContextInterface.AFAssetSource { get set }
  func getHostAppInfo() -> AFMobileContextInterface.HostAppInfo
  func getServerInfo() -> AFMobileContextInterface.ServerInfo
  func getRealmInfo() -> AFMobileContextInterface.RealmInfo?
  func getUserInfo() -> AFMobileContextInterface.UserInfo?
  func getAdditionalContextInfo() -> [Swift.String : Swift.String]?
  var widgetInfo: AFMobileContextInterface.WidgetInfo? { get set }
}
@objc public class HostAppInfo : ObjectiveC.NSObject {
  final public let appName: Swift.String
  final public let appVersion: Swift.String
  final public let appID: Swift.String
  final public let appToken: Swift.String
  final public let locale: Foundation.Locale
  final public let loglevel: AFMobileLoggingInterface.LogLevelType
  final public let offeringId: Swift.String
  final public let sku: Swift.String?
  final public let assetId: Swift.String?
  final public let assetAlias: Swift.String?
  public init(appName: Swift.String, appVersion: Swift.String, appID: Swift.String, offeringId: Swift.String, appToken: Swift.String, locale: Foundation.Locale, logLevelType: AFMobileLoggingInterface.LogLevelType?, sku: Swift.String? = nil, assetId: Swift.String? = nil, assetAlias: Swift.String? = nil)
  public func asDictionary() -> [Swift.String : Swift.String]
  public func asDictionaryForLogging() -> [Swift.String : Swift.String]
  @objc deinit
}
@objc public class ServerInfo : ObjectiveC.NSObject {
  final public let environment: AFMobileContextInterface.AuthEnvironmentType
  public init(environment: AFMobileContextInterface.AuthEnvironmentType)
  public func asDictionary() -> [Swift.String : Swift.String]
  @objc deinit
}
@objc public class RealmInfo : ObjectiveC.NSObject {
  final public let realmId: Swift.String
  final public let realmName: Swift.String
  public init(realmId: Swift.String, realmName: Swift.String)
  public func asDictionary() -> [Swift.String : Swift.String]
  @objc deinit
}
@objc public class UserInfo : ObjectiveC.NSObject {
  final public let userID: Swift.String?
  final public let emailID: Swift.String?
  final public let firstName: Swift.String?
  final public let lastName: Swift.String?
  final public let phones: [AFMobileContextInterface.UserInfo.UserProfilePhone]?
  public init(userID: Swift.String?, emailID: Swift.String?)
  public init(userID: Swift.String?, emailID: Swift.String?, firstName: Swift.String? = nil, lastName: Swift.String? = nil, phones: [AFMobileContextInterface.UserInfo.UserProfilePhone]? = nil)
  public func asDictionary() -> [Swift.String : Swift.String]
  public enum PhoneType : Swift.String {
    case NONE
    case MAIN
    case WORK
    case HOME
    case MOBILE
    case FAX
    case RECOVERY
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public class UserProfilePhone {
    final public let phoneNumber: Swift.String
    final public let type: AFMobileContextInterface.UserInfo.PhoneType
    public init(phoneNumber: Swift.String, type: AFMobileContextInterface.UserInfo.PhoneType)
    @objc deinit
  }
  @objc deinit
}
@objc public class WidgetInfo : ObjectiveC.NSObject, Swift.Codable {
  final public let widgetId: Swift.String
  final public let widgetVersion: Swift.String
  public init(widgetId: Swift.String, widgetVersion: Swift.String)
  public func asDictionary() -> [Swift.String : Swift.String]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol WidgetInfoProvider {
  var info: AFMobileContextInterface.WidgetInfo { get }
}
extension AFMobileContextInterface.WidgetInfo {
  public static func widgetInfo(for instance: Swift.AnyObject) -> AFMobileContextInterface.WidgetInfo
}
extension Foundation.Bundle {
  public var version: Swift.String? {
    get
  }
}
extension AFMobileContextInterface.AuthEnvironmentType : Swift.Equatable {}
extension AFMobileContextInterface.AuthEnvironmentType : Swift.Hashable {}
extension AFMobileContextInterface.AuthEnvironmentType : Swift.RawRepresentable {}
extension AFMobileContextInterface.UserInfo.PhoneType : Swift.Equatable {}
extension AFMobileContextInterface.UserInfo.PhoneType : Swift.Hashable {}
extension AFMobileContextInterface.UserInfo.PhoneType : Swift.RawRepresentable {}
